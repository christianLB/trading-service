openapi: 3.0.3
info:
  title: Trading Service API
  version: 0.1.0
  description: Deterministic trading microservice with risk management

servers:
  - url: http://localhost:8080
    description: Development server
  - url: http://nas:8080
    description: Production server (NAS)

security:
  - bearerAuth: []

paths:
  /healthz:
    get:
      summary: Health check
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '422':
          description: Risk validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Authentication failed

  /orders/{orderId}:
    get:
      summary: Get order by ID
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found

  /positions:
    get:
      summary: Get all open positions
      tags:
        - Positions
      responses:
        '200':
          description: List of open positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PositionResponse'

  /metrics:
    get:
      summary: Prometheus metrics
      tags:
        - Metrics
      security: []
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    CreateOrderRequest:
      type: object
      required:
        - symbol
        - side
        - type
        - qty
        - clientId
        - idempotencyKey
      properties:
        symbol:
          type: string
          example: BTC/USDT
        side:
          type: string
          enum: [buy, sell]
        type:
          type: string
          enum: [market, limit]
        qty:
          type: number
          format: float
          minimum: 0.0001
          example: 0.01
        limitPrice:
          type: number
          format: float
          nullable: true
        clientId:
          type: string
          example: k2600x-admin
        idempotencyKey:
          type: string
          format: uuid

    CreateOrderResponse:
      type: object
      properties:
        orderId:
          type: string
          example: ord_ab12cd34
        status:
          type: string
          enum: [accepted, pending, filled, rejected, cancelled]

    OrderResponse:
      type: object
      properties:
        orderId:
          type: string
        symbol:
          type: string
        side:
          type: string
          enum: [buy, sell]
        type:
          type: string
          enum: [market, limit]
        qty:
          type: number
          format: float
        limitPrice:
          type: number
          format: float
          nullable: true
        filledQty:
          type: number
          format: float
        avgPrice:
          type: number
          format: float
          nullable: true
        status:
          type: string
          enum: [accepted, pending, filled, rejected, cancelled]
        clientId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PositionResponse:
      type: object
      properties:
        symbol:
          type: string
        qty:
          type: number
          format: float
        avgPrice:
          type: number
          format: float
        notional:
          type: number
          format: float
        pnl:
          type: number
          format: float
        updatedAt:
          type: string
          format: date-time

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        database:
          type: string
          enum: [healthy, unhealthy]
        redis:
          type: string
          enum: [healthy, unhealthy]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time

webhooks:
  orderFilled:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  enum: [order_filled]
                orderId:
                  type: string
                symbol:
                  type: string
                filledQty:
                  type: number
                  format: float
                avgPrice:
                  type: number
                  format: float
                ts:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Webhook processed successfully