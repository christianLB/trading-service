services:
  api:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile
      target: ${DOCKER_TARGET:-dev}
    ports:
      - "${API_PORT:-8085}:8080"
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://postgres:postgres@db:5432/trading}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - BROKER=${BROKER:-dummy}
      - EXCHANGE=${EXCHANGE:-binance}
      - API_KEY=${API_KEY:-}
      - API_SECRET=${API_SECRET:-}
      - API_TOKEN=${API_TOKEN:-change_me}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-change_me}
      - MAX_POS_USD=${MAX_POS_USD:-5000}
      - MAX_DAILY_LOSS_USD=${MAX_DAILY_LOSS_USD:-500}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev
      - prod
    volumes:
      - type: bind
        source: ..
        target: /app
    networks:
      - trading-net

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=trading
    ports:
      - "5439:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - dev
      - prod
    networks:
      - trading-net

  redis:
    image: redis:7-alpine
    ports:
      - "6382:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles:
      - dev
      - prod
    networks:
      - trading-net

volumes:
  postgres_data:
  redis_data:

networks:
  trading-net:
    driver: bridge